<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Just Hej</title>
    <link>https://justhej.github.io/posts/</link>
    <description>Recent content in Posts on Just Hej</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hej</copyright>
    <lastBuildDate>Fri, 05 Jan 2024 20:11:04 +0800</lastBuildDate><atom:link href="https://justhej.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swp_1.5: Staying Logical</title>
      <link>https://justhej.github.io/posts/swp_1_5/</link>
      <pubDate>Fri, 05 Jan 2024 20:11:04 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_5/</guid>
      <description>This chapter was 193 lines of code with only one chapter forbidding more than one solution.
Hosted on github.</description>
    </item>
    
    <item>
      <title>Swp_1.4: Condition-wise</title>
      <link>https://justhej.github.io/posts/swp_1_4/</link>
      <pubDate>Tue, 02 Jan 2024 16:46:32 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_4/</guid>
      <description>This was a somewhat tedious chapter because the puzzles didn&amp;rsquo;t allow for more solutions than one or two at most.
Still, I tried to experiment as much as was possible. For instance, tuple-based conditional switch:
1moveForward() 2switch (isOnClosedSwitch, isOnGem) { 3case (true, _): 4 toggleSwitch() 5case (_, true): 6 collectGem() 7default: 8 print(&amp;#34;No switch or gem found.&amp;#34;) 9} Which is something I had seen in C# and wanted to try out in Swift.</description>
    </item>
    
    <item>
      <title>Swp_1.3: Loop Dogg</title>
      <link>https://justhej.github.io/posts/swp_1_3/</link>
      <pubDate>Sat, 30 Dec 2023 16:36:27 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_3/</guid>
      <description>The final puzzle in chapter 3 is:
Called &amp;ldquo;Four stash sweep&amp;rdquo;. Playgrounds expects the user to write something like a function that is looped over, like so:
1func pattern(){ 2 moveForward() 3 collectGem() 4 moveForward() 5 collectGem() 6 turnLeft() 7 turnLeft() 8 moveForward() 9 moveForward() 10 turnRight() 11 moveForward() 12 collectGem() 13 turnLeft() 14 turnLeft() 15 moveForward() 16 moveForward() 17 collectGem() 18 moveForward() 19} 20 21for _ in 1...4{ 22 pattern() 23} However, I think it&amp;rsquo;s best to teach good practices from the get-go.</description>
    </item>
    
    <item>
      <title>Swp_1.2: The Hej standard</title>
      <link>https://justhej.github.io/posts/swp_1_2/</link>
      <pubDate>Tue, 26 Dec 2023 20:30:15 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_2/</guid>
      <description>This is the second chapter&amp;rsquo;s solutions in Swift Playgrounds &amp;ldquo;Let&amp;rsquo;s Code 1&amp;rdquo; book.
For detailed info and background, please see Swp_1_1.
In the final challenge of chapter 2, what Playgrounds expects the learner to do is, which is what I did on my first run when I was new to programming:
1func doubmove(){ 2 moveForward() 3 moveForward() 4} 5 6func doubThenTogg(){ 7 doubmove() 8 toggleSwitch() 9} 10 11func basicTogg(){ 12 doubThenTogg() 13 turnAndBack() 14} 15 16func doubTL(){ 17 turnLeft() 18 turnLeft() 19} 20 21func turnAndBack(){ 22 doubTL() 23 doubmove() 24} 25 26 27func longTogg(){ 28 doubThenTogg() 29 doubThenTogg() 30 doubTL() 31 doubmove() 32 doubmove() 33} 34 35basicTogg() 36basicTogg() 37turnRight() 38 39longTogg() 40longTogg() No longer a noob, I came up with these new shiny solutions now:</description>
    </item>
    
    <item>
      <title>Swp_1.1: Did you say noob?</title>
      <link>https://justhej.github.io/posts/swp_1_1/</link>
      <pubDate>Sat, 23 Dec 2023 20:11:44 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_1/</guid>
      <description>This project is unique in that I&amp;rsquo;ve decided to re-solve the Swift Playgrounds puzzles.
I say &amp;rsquo;re-solve&amp;rsquo; because I did them a long time ago as a noob, when I used to find it overwhelming.
This time around, with more programming muscle under my belt (and knowing what pre-defined data structures are available for use), I will showcase my creativity and problem-solving within the constraints set by Swift Playgrounds; I will list the noob version first, followed by several solutions that progressively get better&amp;ndash;culminating in &amp;ldquo;hej-level&amp;rdquo; solutions that I think can&amp;rsquo;t be bested.</description>
    </item>
    
    <item>
      <title>Fcc_1: No CSS, we&#39;re British</title>
      <link>https://justhej.github.io/posts/fcc_1/</link>
      <pubDate>Fri, 22 Dec 2023 20:11:25 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/fcc_1/</guid>
      <description>This was my first project. It&amp;rsquo;s mostly HTML and the project did not require any CSS, but I added my own CSS just because I am not British :) [sense of humor is necessary sometimes].
To code this project, I used the excellent IntellijIDEA for IDE.
I hosted the final outcome for free on surge.sh. Surge rocks!
The first cat in the photo is my baby, Wiwi.
The other lovely cats are photos taken from Pixabay with thanks.</description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://justhej.github.io/posts/first/</link>
      <pubDate>Mon, 11 Dec 2023 20:10:16 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/first/</guid>
      <description>بسم‌الله الرحمن الرحیم
هست کلید در گنج حکیم
فاتحه فکرت و ختم سخن
نام خدایست بر او ختم کن
پیش وجود همه آیندگان
بیش بقای همه پایندگان
سابقه سالار جهان قدم
مرسله پیوند گلوی قلم
پرده گشای فلک پرده‌دار
پردگی پرده شناسان کار
مبدا هر چشمه که جودیش هست
مخترع هر چه وجودیش هست
لعل طراز کمر آفتاب
حله گر خاک و حلی بند آب
پرورش‌آموز درون پروران
روز برآرنده روزی خوران</description>
    </item>
    
  </channel>
</rss>
