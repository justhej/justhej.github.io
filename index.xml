<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Just Hej</title>
    <link>https://justhej.github.io/</link>
    <description>Recent content on Just Hej</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Hej</copyright>
    <lastBuildDate>Sun, 17 Mar 2024 16:02:26 +0800</lastBuildDate><atom:link href="https://justhej.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swp_2_1: Variables</title>
      <link>https://justhej.github.io/posts/swp_2_1/</link>
      <pubDate>Sun, 17 Mar 2024 16:02:26 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_2_1/</guid>
      <description>This marks the first chapter of challenges from the Let&amp;rsquo;s Code 2 book on Swift Playgrounds. Each different solution I wrote has been marked with version number, like so: v- 0, v- 1 and so forth.
Here&amp;rsquo;s all the code. Also making it available on Github in case you wanted to test the code.
2.1.4 Incrementing the value 1// 2.1.4 2// v- noob 3 4var gemCounter = 0 5 6 while isBlockedLeft{ 7 moveForward() 8 if isOnGem{ 9 collectGem() 10 gemCounter += 1 11 } 12 if isBlocked &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>Swp_1.7: Algorithms</title>
      <link>https://justhej.github.io/posts/swp_1_7/</link>
      <pubDate>Sun, 11 Feb 2024 14:59:45 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_7/</guid>
      <description>This post covers the last chapter of the &amp;ldquo;Let&amp;rsquo;s Code 1&amp;rdquo; book on Swift Playgrounds.
By the way, this chapter was somewhat difficul in that the problem space didn&amp;rsquo;t allow for too much variation in solutions.
Here&amp;rsquo;s all the code. You can also get it from Github
1.7.1 The Right-Hand rule 1// 1.7.1 2// V1 3 4func navigateAroundWall() { 5 if isBlockedRight { 6 moveForward() 7 } else { 8 turnRight() 9 moveForward() 10 } 11} 12 13while !</description>
    </item>
    
    <item>
      <title>Swp_1.6: All this while</title>
      <link>https://justhej.github.io/posts/swp_1_6/</link>
      <pubDate>Tue, 09 Jan 2024 17:53:17 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_6/</guid>
      <description>This is chapter 6 in book 1. Here&amp;rsquo;s all the code. You can also get it from Github.
1// 1.6.1 Creating smarter while loops 2 3func solve() { 4 moveForward() 5 if isOnOpenSwitch { 6 while isOnOpenSwitch{ 7 moveForward() 8 if isOnClosedSwitch{ 9 toggleSwitch() 10 } 11 } 12 } else if isOnClosedSwitch{ 13 while isOnClosedSwitch{ 14 toggleSwitch() 15 if isOnOpenSwitch{ 16 moveForward() 17 } 18 } 19 } else { 20 moveForward() 21 } 22} 23 24for i in 1.</description>
    </item>
    
    <item>
      <title>Swp_1.5: Staying Logical</title>
      <link>https://justhej.github.io/posts/swp_1_5/</link>
      <pubDate>Fri, 05 Jan 2024 20:11:04 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_5/</guid>
      <description>This chapter was 193 lines of code with only one chapter forbidding more than one solution.
Hosted on github.</description>
    </item>
    
    <item>
      <title>Swp_1.4: Condition-wise</title>
      <link>https://justhej.github.io/posts/swp_1_4/</link>
      <pubDate>Tue, 02 Jan 2024 16:46:32 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_4/</guid>
      <description>This was a somewhat tedious chapter because the puzzles didn&amp;rsquo;t allow for more solutions than one or two at most.
Still, I tried to experiment as much as was possible. For instance, tuple-based conditional switch:
1moveForward() 2switch (isOnClosedSwitch, isOnGem) { 3case (true, _): 4 toggleSwitch() 5case (_, true): 6 collectGem() 7default: 8 print(&amp;#34;No switch or gem found.&amp;#34;) 9} Which is something I had seen in C# and wanted to try out in Swift.</description>
    </item>
    
    <item>
      <title>Swp_1.3: Loop Dogg</title>
      <link>https://justhej.github.io/posts/swp_1_3/</link>
      <pubDate>Sat, 30 Dec 2023 16:36:27 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_3/</guid>
      <description>The final puzzle in chapter 3 is:
Called &amp;ldquo;Four stash sweep&amp;rdquo;. Playgrounds expects the user to write something like a function that is looped over, like so:
1func pattern(){ 2 moveForward() 3 collectGem() 4 moveForward() 5 collectGem() 6 turnLeft() 7 turnLeft() 8 moveForward() 9 moveForward() 10 turnRight() 11 moveForward() 12 collectGem() 13 turnLeft() 14 turnLeft() 15 moveForward() 16 moveForward() 17 collectGem() 18 moveForward() 19} 20 21for _ in 1...4{ 22 pattern() 23} However, I think it&amp;rsquo;s best to teach good practices from the get-go.</description>
    </item>
    
    <item>
      <title>Swp_1.2: The Hej standard</title>
      <link>https://justhej.github.io/posts/swp_1_2/</link>
      <pubDate>Tue, 26 Dec 2023 20:30:15 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_2/</guid>
      <description>This is the second chapter&amp;rsquo;s solutions in Swift Playgrounds &amp;ldquo;Let&amp;rsquo;s Code 1&amp;rdquo; book.
For detailed info and background, please see Swp_1_1.
In the final challenge of chapter 2, what Playgrounds expects the learner to do is, which is what I did on my first run when I was new to programming:
1func doubmove(){ 2 moveForward() 3 moveForward() 4} 5 6func doubThenTogg(){ 7 doubmove() 8 toggleSwitch() 9} 10 11func basicTogg(){ 12 doubThenTogg() 13 turnAndBack() 14} 15 16func doubTL(){ 17 turnLeft() 18 turnLeft() 19} 20 21func turnAndBack(){ 22 doubTL() 23 doubmove() 24} 25 26 27func longTogg(){ 28 doubThenTogg() 29 doubThenTogg() 30 doubTL() 31 doubmove() 32 doubmove() 33} 34 35basicTogg() 36basicTogg() 37turnRight() 38 39longTogg() 40longTogg() No longer a noob, I came up with these new shiny solutions now:</description>
    </item>
    
    <item>
      <title>Swp_1.1: Did you say noob?</title>
      <link>https://justhej.github.io/posts/swp_1_1/</link>
      <pubDate>Sat, 23 Dec 2023 20:11:44 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/swp_1_1/</guid>
      <description>This project is unique in that I&amp;rsquo;ve decided to re-solve the Swift Playgrounds puzzles.
I say &amp;rsquo;re-solve&amp;rsquo; because I did them a long time ago as a noob, when I used to find it overwhelming.
This time around, with more programming muscle under my belt (and knowing what pre-defined data structures are available for use), I will showcase my creativity and problem-solving within the constraints set by Swift Playgrounds; I will list the noob version first, followed by several solutions that progressively get better&amp;ndash;culminating in &amp;ldquo;hej-level&amp;rdquo; solutions that I think can&amp;rsquo;t be bested.</description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://justhej.github.io/posts/first/</link>
      <pubDate>Mon, 11 Dec 2023 20:10:16 +0800</pubDate>
      
      <guid>https://justhej.github.io/posts/first/</guid>
      <description>بسم‌الله الرحمن الرحیم
هست کلید در گنج حکیم
فاتحه فکرت و ختم سخن
نام خدایست بر او ختم کن
پیش وجود همه آیندگان
بیش بقای همه پایندگان
سابقه سالار جهان قدم
مرسله پیوند گلوی قلم
پرده گشای فلک پرده‌دار
پردگی پرده شناسان کار
مبدا هر چشمه که جودیش هست
مخترع هر چه وجودیش هست
لعل طراز کمر آفتاب
حله گر خاک و حلی بند آب
پرورش‌آموز درون پروران
روز برآرنده روزی خوران</description>
    </item>
    
  </channel>
</rss>
